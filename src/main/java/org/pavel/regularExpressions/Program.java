package org.pavel.regularExpressions;

import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Введите строку (текст)
 * Найдите наибольшее количество идущих подрят цифр
 * Выведите эти цифры и их количества
 */
public class Program {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        String str = scanner.nextLine();

        Pattern pattern = Pattern.compile("[0-9]+");
        Matcher matcher = pattern.matcher(str);
        int maxLength = 0;
        String numbersSeq = "";
        while (matcher.find()){
            if (maxLength < matcher.end() - matcher.start()){
                maxLength = matcher.end() - matcher.start();
                numbersSeq = matcher.group();
            }
        }
        System.out.println(maxLength + " " + numbersSeq);
    }
}
/**
 * Основные мета символы
 * ^ (крышка) начало проверяемой строки.
 * $ (доллар) конец проверяемой строки.
 * . (точка) представляет собой сокращенную форму записи для символьного класса, совпадающего с любым символом.
 * |  Означает «или». Подвыражения, объединенные этим способом, называются альтернативами (alternatives).
 * ? (знак вопроса) означает, что предшествующий ему символ является необязательным.
 * + Обозначает «один или несколько экземпляров непосредственно предшествующего элемента.
 * * Любое количество экземпляров элемента (в том числе и нулевое).
 * \\d Цифровой символ.
 * \\D Не цифровой символ.
 * \\s Пробельный символ.
 * \\S Не пробельный символ.
 * \\w Буквенный(латиница), цифровой символ или знак подчёркивания.
 * \\W Любой символ, кроме буквенного, цифрового символа или знака подчёркивания.
 * [abc] Диапазон символов или цифр.
 * Примеры:
 * a? - a один раз или ни разу
 * a* - a ноль или более раз
 * a+ - a один или более раз
 * a{n} - a n раз
 * a{n,}- a n или более раз
 * a{n,m}- a от n до m
 * Рассмотрим основные методы класса Matcher
 * boolean matches(): возвращает true, если вся строка совпадает с шаблоном
 * boolean find(): возвращает true, если в строке есть подстрока, которая совпадает с шаблоном,
 * и переходит к этой подстроке
 * String group(): возвращает подстроку, которая совпала с шаблоном в результате вызова метода find.
 * Если совпадение отсутствует, то метод генерирует исключение IllegalStateException.
 * int start(): возвращает индекс текущего совпадения
 * int end(): возвращает индекс следующего совпадения после текущего
 * String replaceAll(String str): заменяет все найденные совпадения подстрокой str и возвращает
 * измененную строку с учетом замен
 */